@startuml sequence_diagram_match_module
participant "MasterOfPuppets" as MasterOfPuppets
participant "perform_matching()" as PerformMatching
participant "Yaml2Regex" as Yaml2Regex
participant "do_matching_and_get_result()" as DoMatching
participant "MatchedObserver" as MatchedObs
participant "CompleteConsumer" as CompleteCons
participant "get_instruction_observers()" as GetObservers
participant "Producer" as Producer
participant "create_producer()" as CreateProducer
participant "ComposableProducer" as Producer

MasterOfPuppets -> PerformMatching: call(pattern_pathstr, input_file, input_file_type)
activate PerformMatching
        PerformMatching -> Yaml2Regex: get_regex_rule(input_file_pathstr)

    activate Yaml2Regex

        Yaml2Regex -> Yaml2Regex: input_file_pathstr
        Yaml2Regex -> Yaml2Regex: return regex_rule

        Yaml2Regex -> PerformMatching: return regex_rule
    deactivate Yaml2Regex

    PerformMatching -> DoMatching: do_matching_and_get_result(regex_rule, input_file, input_file_type, True)
    activate DoMatching

            DoMatching -> MatchedObs: create new instance
            activate MatchedObs
                MatchedObs -> DoMatching: return instance
            deactivate MatchedObs

        DoMatching -> CompleteCons: create_consumer(regex_rule, MatchedObs, ConsumerType)

        activate CompleteCons
            CompleteCons -> DoMatching: return Consumer
        deactivate CompleteCons

        DoMatching -> GetObservers: get_instruction_observers()
        activate GetObservers
            GetObservers -> DoMatching: return observer_list
        deactivate GetObservers

        loop for observer in observer_list
            DoMatching -> CompleteCons: add_observer(observer)
        end

        DoMatching -> CreateProducer: create_producer(input_file_type)
        activate CreateProducer
            CreateProducer -> Producer: create new instance
            activate Producer
                Producer -> CreateProducer: return instance
            deactivate Producer
            CreateProducer -> DoMatching: return Producer
        deactivate CreateProducer

        DoMatching -> Producer: process_file(input_file, CompleteCons)
        activate Producer
            Producer -> Producer: parser.parse()
            loop for insn in assembly_file
                Producer -> CompleteCons: consume()
            end
            Producer -> CompleteCons: finalize()
        deactivate Producer
        CompleteCons -> MatchedObs: finalize()
        MatchedObs -> DoMatching: finalize()
        DoMatching -> PerformMatching: return result
    deactivate DoMatching
    PerformMatching -> MasterOfPuppets: return final result
deactivate PerformMatching
@enduml
