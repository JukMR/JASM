@startuml regex_module_class_diagram

abstract class File2Regex {
    {static} +load_file(file): Any
    +produce_regex()
    +get_assembly_style(): DisassStyle
}

class Yaml2Regex {
    +produce_regex(): str
    +get_assembly_style(): DisassStyle
    +get_valid_addr_range(): Optional[ValidAddrRange]
    {static} +load_file(file: str): Any
    -macros_from_terminal_filepath: Optional[List[str]]
    -loaded_file: Any
    -_get_pattern(): PatternTree
    -load_macros_from_args(): List[Dict]
    -_generate_rule_tree(patterns: PatternTree): PatternNode
}

class MacroExpander {
    +resolve_all_macros(macros: List[Dict], tree: PatternTree): PatternTree
    -_resolve_macro(macro: MacroTree, tree: PatternTree): PatternTree
    -_macro_has_args(macro: MacroTree): bool
    -_apply_macro_recursively(macro: MacroTree, tree: PatternTree): PatternTree
    -_process_str_tree(tree: str, macro_name: str, macro: MacroTree): PatternTree
    -_process_dict_tree(tree: Dict, macro_name: str, macro: MacroTree): PatternTree
    -_apply_macro_to_tree(node: PatternTree, macro: MacroTree): PatternTree
    -_apply_macro_to_tree_substring(node: str, macro: MacroTree): str
}

class PatternNodeBuilderNoParents {
    +build(): PatternNodeTmpUntyped
    -command: DictNode
    -name: str | int
    -times: TimeType
    -children: Optional[dict | List[PatternNode]]
    -_get_name(command_dict: DictNode): str
    -_get_times(command_dict: DictNode): TimeType
    -_get_children(name: str, command: DictNode): List[PatternNode]
    {static} - _get_simple_child(name: str): List[PatternNodeTmpUntyped]
}

abstract class PatternNode {
    pattern_node_data: PatternNodeData
    {abstract} get_regex(): str
}

class PatternNodeTypeBuilder {
    -pattern_node: PatternNode
    -parent: Optional[PatternNode]
    +set_type(): PatternNode
    +build(): PatternNode
    + get_type_when_str(self, name: str) -> Optional[PatternNode]:
    + is_ancestor_deref() -> bool:
    + has_any_ancestor_who_is_capture_group_reference() -> bool:
    + any_ancestor_is_mnemonic() -> bool:
    + build() -> PatternNode:
    + add_new_references_to_global_list() -> None:
    - _set_type() -> PatternNode:
    - _get_type() -> PatternNode:
    - _process_capture_group() -> PatternNode:
    - _is_capture_group_operand_or_special_register_capture() -> bool:
    - _process_capture_operand_and_register_capture() -> PatternNode:
    - _is_registry_capture_group() -> bool:
    - _process_capture_group_mnemonic() -> PatternNode:
    - _get_type_when_int() -> PatternNode:
    - _is_node(name: str) -> bool:
    - _is_deref_property_capture_group() -> bool:

}

class ArgsMappingGenerator {
    +get_args_mapping_dict(tree: PatternTree, args: List[str]): Dict
    -_get_args_mapping(tree: PatternTree, current_arg: str): Generator[Dict, None, None]
    -_yield_key_value_pairs(data: Union[Dict[Any, Any], List[Any]]): Generator[Tuple[Any, Any], None, None]
}

class MacroArgsResolver {
    +resolve(macro: MacroTree, tree: PatternTree): MacroTree
    -_get_macro_mapping_arg_dict(macro: MacroTree, tree: PatternTree): MappingDict
    -_evaluate_args_in_macro(macro: MacroTree, mapping_dict: MappingDict): MacroTree
    -_iter_items_with_path(elems: Union[str, List, Dict], path: Tuple = ()): Generator[Tuple[Tuple, Any], None, None]
    -_replace_item_in_structure(struct: Union[Dict, List], path: Tuple, new_value: Any): None
}

class CaptureGroupIndex {
    +index: int
    {abstract} to_regex(): str
}

class CaptureGroupIndexInstructionCall extends CaptureGroupIndex {
    +to_regex(): str
}

class CaptureGroupIndexOperandCall extends CaptureGroupIndex {
    +to_regex(): str
}

class DerefObject {
    +get_regex(): str
}

class DerefObjectBuilder {
    +build(): DerefObject
}

class PatternNodeTmpUntyped  extends PatternNode {
    +get_regex(): str
}

class PatternNodeMnemonic  extends _PatternNodeMnemonicOrOperandProcessor {
    +get_regex(): str
}

class PatternNodeOperand  extends _PatternNodeMnemonicOrOperandProcessor {
    +get_regex(): str
}

class PatternNodeBranchRoot  extends PatternNode {
    +get_regex(): str
}

class PatternNodeRoot  extends PatternNodeBranchRoot {
}

class PatternNodeBranch extends PatternNodeBranchRoot {
}

class PatternNodeNode  extends PatternNodeBranchRoot {
}

class PatternNodeTimes  extends PatternNode {
    +get_regex(): str
}

class PatternNodeDerefProperty  extends PatternNode {
    +get_regex(): str
}

class PatternNodeDeref  extends PatternNode {
    + get_regex(): str
    + process_deref(): -> str:

}

class PatternNodeDerefPropertyCaptureGroupReference  extends PatternNode {
    +get_regex(): str
}
class PatternNodeDerefPropertyCaptureGroupCall  extends PatternNode {
    +get_regex(): str
}

class PatternNodeCaptureGroupInstructionCall extends PatternNode {
    +get_regex(): str
}

class PatternNodeCaptureGroupInstructionReference extends PatternNode {
    +get_regex(): str
}

class PatternNodeCaptureGroupOperandCall extends PatternNode {
    +get_regex(): str
}

class PatternNodeCaptureGroupOperandReference extends PatternNode {
    +get_regex(): str
}

class PatternNodeCaptureGroupRegisterReferenceGenreg  extends PatternNode {
    +get_regex(): str
}

class PatternNodeCaptureGroupRegisterReferenceIndreg  extends PatternNode {
    +get_regex(): str
}

class PatternNodeCaptureGroupRegisterReferenceStackreg  extends PatternNode {
    +get_regex(): str
}

class PatternNodeCaptureGroupRegisterReferenceBasereg  extends PatternNode {
    +get_regex(): str
}

class OperandCaptureGroupProcessor {
    + pattern_node_type_builder : PatternNodeTypeBuilder
    + process() -> PatternNode:
    + has_any_ancestor_who_is_capture_group_reference() -> bool:
    + add_new_references_to_global_list() -> None:
    - _process_capture_group_operand() -> PatternNode:
    - _process_operand_call() -> PatternNode:
    - _process_operand_reference() -> PatternNode:
}

class PatternNodeCaptureGroupRegisterCall  extends PatternNode {
    +get_regex(): str
}



class RegisterCaptureGroupProcessor {
    + pattern_node_type_builder: PatternNodeTypeBuilder
    + process() -> PatternNode:
    + process_registry_capture_group() -> PatternNode:
    + has_any_ancestor_who_is_capture_group_reference_register() -> bool:
    + add_new_references_to_global_list() -> None:


}

class SharedContext {
    - _capture_group_references: list[str]
    - _initialized: bool = False
    + initialize(): None
    + is_initialized(): bool
    + capture_group_references: list[str]
    + add_capture(entry: str): None
    + get_capture_index(capture: str): int
    + capture_is_registered(capture: str): bool
}

class SpecialRegisterCaptureGroupTypeDecider {

    + pattern_node_type_builder: PatternNodeTypeBuilder
    + pattern_name: str
    +process(): PatternNode
    +is_genreg(): bool
    +is_indreg(): bool
    +is_stackreg(): bool
    +is_basereg(): bool
}

class TimesTypeBuilder {
    + get_min_max_regex(times: TimesType): str
}

enum DerefChildNames {
    MAIN_REG
    CONSTANT_OFFSET
    REGISTER_MULTIPLIER
    CONSTANT_MULTIPLIER

}

class CaptureGroupIndexRegisterCall extends CaptureGroupIndex {
    + to_regex() -> str:
}

class _BranchProcessor {
    + process_pattern_node(parent: PatternNode, child_regexes: List[str], times_regex: Optional[str])
    + {static} process_and(child_regexes: List[str], times_regex: Optional[str]) -> str:
    + process_or(self, child_regexes: List[str], times_regex: Optional[str]) -> str:
    + {static} process_not(child_regexes: List[str], times_regex: Optional[str]) -> str:
    + process_and_any_order(self, child_regexes: List[str], times_regex: Optional[str]) -> str:
    + {static} generate_any_order_permutation(child_regexes: List[str]) -> List[List[str]]:
    + {static} join_or_instructions(inst_list: List[str]) -> str:

}

class _PatternNodeMnemonicOrOperandProcessor extends PatternNode {
    + get_regex() -> str:
    + process_leaf() -> str:
    - _sanitize_operand_name(name: PatternNodeName) -> PatternNodeName:
}

class _RegexWithOperandsCreator {
    + generate_regex() -> str:
    + get_operand_regex() -> Optional[str]:
    + get_min_max_regex() -> Optional[str]:
    - _form_regex_with_time() -> str:
    - _form_regex_without_time() -> str:


}

class PatternNodeData {
    name: PatternNodeName
    times: TimeType
    children: Optional[dict | List[PatternNode]]
    parent: Optional[PatternNode]
    shared_context: SharedContext
}

class CaptureGroupInterface {
    + {static} has_any_ancestor_who_is_capture_group_reference(shared_context: SharedContext, pattern_node_name: str) -> bool:
    + {static} add_new_references_to_global_list(shared_context: SharedContext, pattern_node_name: str) -> None:
}



' Relations

_PatternNodeMnemonicOrOperandProcessor ..> _RegexWithOperandsCreator: uses


File2Regex <|--  Yaml2Regex
PatternNodeTypeBuilder o-- PatternNode
PatternNodeBuilderNoParents .> PatternNode : creates >
PatternNodeTypeBuilder .> PatternNode : creates >


PatternNodeBranchRoot *-- PatternNode : contains
PatternNodeTypeBuilder o-- "1" PatternNode : builds >

PatternNode .> PatternNodeData : uses >
PatternNodeData .> SharedContext : uses >



DerefObjectBuilder ..> DerefObject : builds >
DerefObjectBuilder ..> PatternNode : uses >
DerefObjectBuilder .> DerefChildNames : uses >



_RegexWithOperandsCreator ..> TimesTypeBuilder : uses >
PatternNodeDeref o-- TimesTypeBuilder : uses >
PatternNodeBranchRoot ..> TimesTypeBuilder : uses >
PatternNodeBranchRoot ..> _BranchProcessor : uses >


PatternNodeTypeBuilder *-- OperandCaptureGroupProcessor : uses >
PatternNodeTypeBuilder *-- RegisterCaptureGroupProcessor : uses >
PatternNodeTypeBuilder *-- SpecialRegisterCaptureGroupTypeDecider : uses >

RegisterCaptureGroupProcessor o-- SpecialRegisterCaptureGroupTypeDecider : uses >
OperandCaptureGroupProcessor o-- PatternNodeCaptureGroupOperandReference: uses >


PatternNode -- "1" PatternNode : parent >
PatternNode *-- "0..*" PatternNode : children >

PatternNode ..> CaptureGroupIndex : uses >


PatternNodeDeref  *- DerefObject : uses >
PatternNodeDeref  *- DerefObjectBuilder : uses >


MacroArgsResolver ..> ArgsMappingGenerator : uses >
MacroExpander ..> MacroArgsResolver : uses >

SpecialRegisterCaptureGroupTypeDecider ..>  PatternNodeCaptureGroupRegisterReferenceGenreg: creates >
SpecialRegisterCaptureGroupTypeDecider ..>  PatternNodeCaptureGroupRegisterReferenceIndreg: creates >
SpecialRegisterCaptureGroupTypeDecider ..>  PatternNodeCaptureGroupRegisterReferenceStackreg: creates >
SpecialRegisterCaptureGroupTypeDecider ..>  PatternNodeCaptureGroupRegisterReferenceBasereg: creates >

PatternNodeCaptureGroupOperandCall o-- CaptureGroupIndexOperandCall: uses >
PatternNodeDerefPropertyCaptureGroupCall o-- CaptureGroupIndexOperandCall: uses >

PatternNodeCaptureGroupRegisterCall o-- CaptureGroupIndexRegisterCall: uses >

CaptureGroupInterface o-- PatternNodeTypeBuilder: uses >
CaptureGroupInterface o-- OperandCaptureGroupProcessor: uses >
CaptureGroupInterface o-- RegisterCaptureGroupProcessor: uses >

@enduml
