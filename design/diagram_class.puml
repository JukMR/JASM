@startuml diagram_class

skinparam linetype polyline
skinparam classFontName Helvetica
skinparam ClassFontSize 14
skinparam ArrowColor MidnightBlue
skinparam groupInheritance 2


skinparam class {

}

' PACKAGES AND ELEMENTS DEFINITIONS

package "Stringify_Asm" {

    class Instruction {
        + addrs: str
        + mnemonic: str
        + operands: List[str]
        + stringify() -> str
    }

    interface IInstructionProducer {
        {abstract} + process_file(file: str, iConsumer: IConsumer) -> None
    }


    class ComposableProducer {
        + disassembler: Disassembler
        + parser: AsmParser
        + __init__(disassembler: Disassembler, parser: AsmParser) -> None
        + process_file(file: str, iConsumer: IConsumer) -> None
    }

    package Disassemblers {

        abstract class Disassembler {
            {abstract} + disassemble(input_file: str) -> str
        }
        class ShellDisassembler {
            - program: str
            - flags: str
            + __init__(program: str, flags: str) -> None
            + disassemble(input_file: str) -> str
        }

        class GNUObjdumpDisassembler {
            + __init__(flags: str) -> None

        }

        class LLvmObjdumpDisassembler {
            + __init__(flags: str) -> None
        }

        class NullDisassembler {
            + disassemble(input_file: str) -> str
        }
    }




    package Parsers{
        abstract class AsmParser {
            {abstract} parse(file: str, iConsumer: IConsumer) -> None:

        }

        class LlvmObjdumpParser {
            + parse(file: str, iConsumer: IConsumer) -> None
        }


        class GNUObjdumpParser {
            + parse(file: str, iConsumer: IConsumer) -> None
        }

    }




    interface IMatchedObserver {
        {abstract} + matched: bool
        {abstract} + stringified_instructions: str
        {abstract} + regex_matched(addr: str) -> None
        {abstract} + finalize() -> None
    }

    interface IConsumer {
        + __init__(matched_observer: IMatchedObserver) -> None
        {abstract} + consume_instruction(inst: Instruction) -> None
        {abstract} + finalize() -> None
    }

    class InstructionObserverConsumer {
        - matchedObserver: IMatchedObserver
        - observedInstructions: List[Instruction]
        + __init__(matchedObserver: IMatchedObserver) -> None
        + consume_instruction(inst: Instruction) -> None
        + observe_instruction(inst: Instruction) -> Optional[Instruction]
        + finalize() -> None
    }

    class CompleteConsumer {
        - matchedObserver: IMatchedObserver
        - instructions: List[Instruction]
        + __init__(matchedObserver: IMatchedObserver) -> None
        + consume_instruction(inst: Instruction) -> None
        + finalize() -> None
    }

    class StreamConsumer {
        - matchedObserver: IMatchedObserver
        - streamBuffer: StreamBuffer
        + __init__(matchedObserver: IMatchedObserver) -> None
        + consume_instruction(inst: Instruction) -> None
        + finalize() -> None
    }

    class MatchedObserver {
        - isMatched: bool
        - instructions: List[Instruction]
        + regex_matched(addr: str) -> None
        + finalize() -> None
        + matched: bool
        + stringified_instructions: str
    }

}


package Regex {
    abstract class File2Regex {
        {abstract} load_file(file) : Any
        {abstract} produce_regex()
    }


    class Yaml2Regex {
        -loaded_file: Any
        +__init__(pattern_pathstr: str): None
        +load_file(file: str): Any
        -_generate_rule_tree(patterns: List[str]): Command
        +produce_regex(): str
        +get_pattern(): dict
    }

    package command_pkg {
        class Command {
            -command_dict: DictNode
            -name: str | int
            -times: TimeType
            -children: Optional[dict | List["Command"]]
            -command_type: Optional[CommandTypes]
            -parent: Optional["Command"]
            +__init__(command_dict: DictNode, name: str | int, times: TimeType, children: Optional[dict | List["Command"]], command_type: Optional[CommandTypes], parent: Optional["Command"]): None
            +get_regex(command: "Command"): str
            +process_leaf(com: "Command"): str
            +sanitize_operand_name(name: str | int): str | int
            +process_branch(command: "Command"): str
            +process_children(command: "Command"): List[str]
        }

        class BranchProcessor {
            +process_command(command_name: str | int, child_regexes: List[str], times_regex: Optional[str]): str
            +process_and(child_regexes: List[str], times_regex: Optional[str]): str
            +process_or(child_regexes: List[str], times_regex: Optional[str]): str
            +process_not(child_regexes: List[str], times_regex: Optional[str]): str
            +process_and_any_order(child_regexes: List[str], times_regex: Optional[str]): str
            +generate_any_order_permutation(child_regexes: List[str]): List[List[str]]
            +join_instructions(inst_list: List[str]): str
        }
        class RegexWithOperandsCreator {
            -name: str | int
            -operands: Optional[List[Command]]
            -times: Optional[TimeType]
            +__init__(name: str | int, operands: Optional[List[Command]], times: Optional[TimeType]): None
            +generate_regex(): str
            +get_operand_regex(): Optional[str]
            +get_min_max_regex(): Optional[str]
            +_form_regex_with_time(operands_regex: Optional[str], times_regex: str): str
            +_form_regex_without_time(operands_regex: Optional[str]): str
        }

    }


    package tree_builder_pkg {

        class CommandBuilderNoParents {
            -command: DictNode | str | int
            -name: str | int
            -times: TimeType
            -children: Optional[dict | List["Command"]]
            +__init__(command_dict: DictNode | str | int): None
            +_get_name(command_dict: DictNode): str
            +_get_times(command_dict: DictNode): TimeType
            +_get_children(name: str, command: DictNode): List[Command]
            +build(): Command
        }

        class CommandParentsBuilder {
            -command: Command
            +__init__(command: Command): None
            +set_parent(parent: Command, children: List[Command]): None
            +build(): None
        }

        class CommandsTypeBuilder {
            -command: Command
            +__init__(parent: Command): None
            +_get_type(): CommandTypes
            +set_type(): Command
            +is_father_is_mnemonic(): bool
            +any_ancestor_is_mnemonic(): bool
            +build(): None
        }
    }

    package macro_expander_pkg {
        class MacroExpander {
            +resolve_macros(macros: dict, pattern: dict): dict
        }
    }

}

package "Observers" {
        class TagOutofAddrsRangeJumps {
        - max_addr: str
        + __init__(max_addr: str) -> None
        + consume_instruction(inst: Instruction) -> None
        + deal_with_instruction_out_of_range(inst: Instruction) -> Instruction
    }

    class CheckAddrRangeJumpsNearBadInstruction {
        - livehood: int
        - current_instructions_index: int
        + __init__(distance: int) -> None
        + consume_instruction(inst: Instruction) -> None
        + tag_instruction(inst: Instruction) -> Instruction
    }

    class RemoveEmptyInstructions {
        + observe_instruction(inst: Instruction) -> Optional[Instruction]
    }
}


' RELATIONS

' Regex

File2Regex <|-- Yaml2Regex
Yaml2Regex --> macro_expander_pkg: check if there is any macro and do the expansion

' command_pkg
Yaml2Regex --> command_pkg: generate rule tree

' tree_builder_pkg
Yaml2Regex --> CommandBuilderNoParents
Yaml2Regex --> CommandParentsBuilder
Yaml2Regex --> CommandsTypeBuilder



' Stringify_Asm

' Use this hidden element to display producer at left and consumer at right
IConsumer -[hidden]> IInstructionProducer :uses
IInstructionProducer -right> IConsumer :uses

' Producer
IInstructionProducer <|-- ComposableProducer

AsmParser <|--- GNUObjdumpParser
AsmParser <|--- LlvmObjdumpParser

Disassembler <|-- ShellDisassembler
ShellDisassembler <|-- GNUObjdumpDisassembler
ShellDisassembler <|-- LLvmObjdumpDisassembler
Disassembler <|--- NullDisassembler

' Hidden arrow to draw the relation Disassembler -> NullDisassembler in the correct level
NullDisassembler -[hidden]> LLvmObjdumpDisassembler: uses


ComposableProducer --o Disassembler
ComposableProducer --o AsmParser


' Consumer
InstructionObserverConsumer -o IMatchedObserver
InstructionObserverConsumer <|-- CompleteConsumer
InstructionObserverConsumer <|-- StreamConsumer
IMatchedObserver <|-- MatchedObserver
IConsumer <|-- InstructionObserverConsumer




' Observers


@enduml
