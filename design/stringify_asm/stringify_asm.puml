@startuml stringify_asm_diagram_class

' skinparam linetype polyline
' skinparam classFontName Helvetica
' skinparam ClassFontSize 14
' skinparam ArrowColor MidnightBlue
' skinparam groupInheritance 2


' skinparam class {

' }

class Instruction {
    + addrs: str
    + mnemonic: str
    + operands: List[str]
    + stringify() -> str
}

interface IInstructionProducer {
    {abstract} + process_file(file: str, iConsumer: IConsumer) -> None
}


class ComposableProducer {
    + disassembler: Disassembler
    + parser: AsmParser
    + __init__(disassembler: Disassembler, parser: AsmParser) -> None
    + process_file(file: str, iConsumer: IConsumer) -> None
}

package Disassemblers {

    abstract class Disassembler {
        {abstract} + disassemble(input_file: str) -> str
    }
    class ShellDisassembler {
        - program: str
        - flags: str
        + __init__(program: str, flags: str) -> None
        + disassemble(input_file: str) -> str
    }

    class GNUObjdumpDisassembler {
        + __init__(flags: str) -> None

    }

    class LLvmObjdumpDisassembler {
        + __init__(flags: str) -> None
    }

    class NullDisassembler {
        + disassemble(input_file: str) -> str
    }
}




package Parsers{
    abstract class AsmParser {
        {abstract} parse(file: str, iConsumer: IConsumer) -> None:

    }

    class LlvmObjdumpParser {
        + parse(file: str, iConsumer: IConsumer) -> None
    }


    class GNUObjdumpParser {
        + parse(file: str, iConsumer: IConsumer) -> None
    }

    }




interface IMatchedObserver {
    {abstract} + matched: bool
    {abstract} + stringified_instructions: str
    {abstract} + regex_matched(addr: str) -> None
    {abstract} + finalize() -> None
}

interface IConsumer {
    + __init__(matched_observer: IMatchedObserver) -> None
    {abstract} + consume_instruction(inst: Instruction) -> None
    {abstract} + finalize() -> None
}

class InstructionObserverConsumer {
    - matchedObserver: IMatchedObserver
    - observedInstructions: List[Instruction]
    + __init__(matchedObserver: IMatchedObserver) -> None
    + consume_instruction(inst: Instruction) -> None
    + observe_instruction(inst: Instruction) -> Optional[Instruction]
    + finalize() -> None
}

class CompleteConsumer {
    - matchedObserver: IMatchedObserver
    - instructions: List[Instruction]
    + __init__(matchedObserver: IMatchedObserver) -> None
    + consume_instruction(inst: Instruction) -> None
    + finalize() -> None
}

class StreamConsumer {
    - matchedObserver: IMatchedObserver
    - streamBuffer: StreamBuffer
    + __init__(matchedObserver: IMatchedObserver) -> None
    + consume_instruction(inst: Instruction) -> None
    + finalize() -> None
}

class MatchedObserver {
    - isMatched: bool
    - instructions: List[Instruction]
    + regex_matched(addr: str) -> None
    + finalize() -> None
    + matched: bool
    + stringified_instructions: str
}



' Stringify_Asm

' Use this hidden element to display producer at left and consumer at right
IConsumer -[hidden]> IInstructionProducer :uses
IInstructionProducer -right> IConsumer :uses

' Producer
IInstructionProducer <|-- ComposableProducer

AsmParser <|--- GNUObjdumpParser
AsmParser <|--- LlvmObjdumpParser

Disassembler <|-- ShellDisassembler
ShellDisassembler <|-- GNUObjdumpDisassembler
ShellDisassembler <|-- LLvmObjdumpDisassembler
Disassembler <|--- NullDisassembler

' Hidden arrow to draw the relation Disassembler -> NullDisassembler in the correct level
NullDisassembler -[hidden]> LLvmObjdumpDisassembler: uses


ComposableProducer --o Disassembler
ComposableProducer --o AsmParser


' Consumer
InstructionObserverConsumer -o IMatchedObserver
InstructionObserverConsumer <|-- CompleteConsumer
InstructionObserverConsumer <|-- StreamConsumer
IMatchedObserver <|-- MatchedObserver
IConsumer <|-- InstructionObserverConsumer

@enduml