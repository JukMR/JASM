{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "test deref recursive resolution",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/logic_operators_inside_deref.yaml",
                "-s",
                "tests/assembly/test_deref_recursive_building.s"
            ]
        },
        {
            "name": "moonbounce_binarly_bad_small_19_lines",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/moonbounce_from_binarly.yaml",
                "-s",
                "tests/assembly/moonbounce_binarly_bad_small_19_lines.s"
            ]
        },
        {
            "name": "include_and_include_list",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/include_and_include_list.yaml",
                "-s",
                "tests/assembly/binary_data.s"
            ]
        },
        {
            "name": "not call",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/not_call.yaml",
                "-s",
                "tests/assembly/binary_data.s"
            ]
        },
        {
            "name": "exclude_list",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/exclude_list.yaml",
                "-s",
                "tests/assembly/binary_data.s"
            ]
        },
        {
            "name": "10_calls",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/10_calls.yaml",
                "-s",
                "tests/assembly/binary_data.s"
            ]
        },
        {
            "name": "1_call",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/1_call.yaml",
                "-s",
                "tests/assembly/binary_data.s"
            ]
        },
        {
            "name": "call_between_3_and_9",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/call_between_3_and_9.yaml",
                "-s",
                "tests/assembly/binary_data.s"
            ]
        },
        {
            "name": "moonbounce_malware_short_6_lines",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/moonbounce_regex_matcher.yaml",
                "-s",
                "tests/assembly/moonbounce_malware_short_6_lines.s"
            ]
        },
        {
            "name": "moonbounce_binarly_bad_small_19_lines",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/moonbounce_regex_matcher.yaml",
                "-s",
                "tests/assembly/moonbounce_binarly_bad_small_19_lines.s"
            ]
        },
        {
            "name": "exclude_list",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/exclude_list.yaml",
                "-s",
                "tests/assembly/binary_data.s"
            ]
        },
        {
            "name": "include_and_include_list_with_macros",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/include_and_include_list_with_macros.yaml",
                "-s",
                "tests/assembly/binary_data.s"
            ]
        },
        {
            "name": "include_and_include_list_with_macros_with_args",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/include_and_include_list_with_macros_with_args_mock_hint.yaml",
                "-s",
                "tests/assembly/binary_data.s"
            ]
        },
        {
            "name": "smc_assembly",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/smc.yaml",
                "-s",
                "tests/assembly/smc.s"
            ]
        },
        {
            "name": "smc_binary_eko",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/smc.yaml",
                "-b",
                "tests/binary/smc_eko.bin"
            ]
        },
        {
            "name": "oren_rule_w_macros",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/oren_rule_att.yaml",
                "-b",
                "tests/binary/lenovo2.bin"
            ]
        },
        {
            "name": "parse_with_manual_regex",
            "type": "debugpy",
            "request": "launch",
            "program": "parsing_asm_manual_regex.py",
            "console": "integratedTerminal",
            "justMyCode": true,
        },
        {
            "name": "oren_rule_example_addr_valid",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/oren_rule_att_addr_valid.yaml",
                "-b",
                "tests/binary/lenovo2.bin"
            ]
        },
        {
            "name": "oren_rule_example_addr_valid_assembly",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/oren_rule_att_addr_valid.yaml",
                "-s",
                "tests/assembly/lenovo2_short.s"
            ]
        },
        {
            "name": "lenovo_qequ_objdump",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/oren_rule_att.yaml",
                "-s",
                "tests/assembly/objlenovo_qequ_objdump_2.34.s"
            ]
        },
        {
            "name": "lenovo2 short rule",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/oren_rule_att.yaml",
                "-s",
                "tests/assembly/lenovo2_short.s"
            ]
        },
        {
            "name": "moonbounce_with_multiple_findings",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "--all-matches",
                "-p",
                "tests/yamls/moonbounce_regex_matcher.yaml",
                "-b",
                "tests/binary/moonbounce.bin"
            ]
        },
        {
            "name": "1_call_plain_with_multiple_findings",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "--all-matches",
                "-p",
                "tests/yamls/1_call_plain.yaml",
                "-s",
                "tests/assembly/binary_data.s"
            ]
        },
        {
            "name": "1_call_plain_with_single_findings",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/1_call_plain.yaml",
                "-s",
                "tests/assembly/binary_data.s"
            ]
        },
        {
            "name": "capture_groups_test_rule on binary_data_for_capture_groups",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/capture_groups_test_rule.yaml",
                "-s",
                "tests/assembly/binary_data_for_capture_groups.s"
            ]
        },
        {
            "name": "oren_rule_att_with_capture_groups",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/oren_rule_att_with_capture_groups.yaml",
                "-s",
                "tests/assembly/lenovo2_short.s"
            ]
        },
        {
            "name": "oren_rule_att_with_capture_groups_macro_subtree_expansion",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/oren_rule_att_with_capture_groups_macro_subtree_expansion.yaml",
                "-s",
                "tests/assembly/lenovo2_short.s"
            ]
        },
        {
            "name": "zero_reg_macro_with_args",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/zero_reg.yaml",
                "-s",
                "tests/assembly/zero_reg/main_O3.s"
            ]
        },
        {
            "name": "function with zero_reg and -O3",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/function_return_0.yaml",
                "-s",
                "tests/assembly/zero_reg/main_O3.s"
            ]
        },
        {
            "name": "macros_from_terminal",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "-p",
                "tests/yamls/macros_from_terminal.yaml",
                "-s",
                "tests/yamls/1_call_plain.yaml",
                "--macros",
                "tests/macros/macro_1.yaml",
                "tests/macros/macro_2.yaml"
            ]
        },
        {
            "name": "Jesse rule assembly matching only",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "--all-matches",
                "-p",
                "tests/yamls/jesse_rule.yaml",
                "-s",
                "tests/assembly/jesse_rule_asm.s",
            ]
        },
        {
            "name": "Jesse rule assembly matching only with register capture",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "--all-matches",
                "-p",
                "tests/yamls/jesse_rule_with_register_capture_group.yaml",
                "-s",
                "tests/assembly/jesse_rule_matching.s",
            ]
        },
        {
            "name": "Jesse rule assembly matching only with register capture and special capture group notation",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "--all-matches",
                "-p",
                "tests/yamls/jesse_rule_with_register_capture_group_and_special_capture_group_notation.yaml",
                "-s",
                "tests/assembly/jesse_rule_matching.s",
            ]
        },
        {
            "name": "Register capture group example 1",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "--all-matches",
                "-p",
                "tests/yamls/register_capture_group_example_1.yaml",
                "-s",
                "tests/source_test_files/register_capture_groups/main.s",
            ]
        },
        {
            "name": "2 zero reg",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "--all-matches",
                "-p",
                "tests/yamls/2_zero_reg.yaml",
                "-s",
                "tests/assembly/2_zero_reg_rule.s",
            ]
        },
        {
            "name": "any_macro",
            "type": "debugpy",
            "request": "launch",
            "program": "main.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--debug",
                "--all-matches",
                "-p",
                "tests/yamls/any_macro.yaml",
                "-s",
                "tests/assembly/binary_data.s",
            ]
        },
    ]
}